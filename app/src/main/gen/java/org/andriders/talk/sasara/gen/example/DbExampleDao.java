package org.andriders.talk.sasara.gen.example;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_EXAMPLE".
*/
public class DbExampleDao extends AbstractDao<DbExample, String> {

    public static final String TABLENAME = "DB_EXAMPLE";

    /**
     * Properties of entity DbExample.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UniqueId = new Property(0, String.class, "uniqueId", true, "UNIQUE_ID");
        public final static Property UpdatedDate = new Property(1, java.util.Date.class, "updatedDate", false, "UPDATED_DATE");
    };


    public DbExampleDao(DaoConfig config) {
        super(config);
    }
    
    public DbExampleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_EXAMPLE\" (" + //
                "\"UNIQUE_ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: uniqueId
                "\"UPDATED_DATE\" INTEGER NOT NULL );"); // 1: updatedDate
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_DB_EXAMPLE_UNIQUE_ID ON DB_EXAMPLE" +
                " (\"UNIQUE_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_EXAMPLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbExample entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUniqueId());
        stmt.bindLong(2, entity.getUpdatedDate().getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbExample entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUniqueId());
        stmt.bindLong(2, entity.getUpdatedDate().getTime());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public DbExample readEntity(Cursor cursor, int offset) {
        DbExample entity = new DbExample( //
            cursor.getString(offset + 0), // uniqueId
            new java.util.Date(cursor.getLong(offset + 1)) // updatedDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbExample entity, int offset) {
        entity.setUniqueId(cursor.getString(offset + 0));
        entity.setUpdatedDate(new java.util.Date(cursor.getLong(offset + 1)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DbExample entity, long rowId) {
        return entity.getUniqueId();
    }
    
    @Override
    public String getKey(DbExample entity) {
        if(entity != null) {
            return entity.getUniqueId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
